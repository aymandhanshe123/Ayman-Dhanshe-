{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Choose product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Custom Product Grid",
      "category": "Products"
    }
  ]
}
{% endschema %}

<section class="custom-grid">
  <div class="grid-container">
    {% for block in section.blocks %}
      {% assign product = all_products[block.settings.product] %}
      {% if product %}
        <div class="product-card">
          <img src="{{ product.featured_image | image_url: '400x' }}" alt="{{ product.title }}">
          <h3>{{ product.title }}</h3>
          <button class="circle-btn" data-handle="{{ product.handle }}">+</button>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</section>

<!-- Popup Modal -->
<div id="productPopup" class="popup hidden">
  <div class="popup-content">
    <span id="popupClose">&times;</span>
    <div id="popupDetails"></div>
  </div>
</div>

<style>
.custom-grid .grid-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}
.product-card {
  position: relative;
  text-align: center;
}
.product-card img {
  width: 100%;
  border-radius: 8px;
}
.circle-btn {
  position: absolute;
  bottom: 10px;
  right: 10px;
  border: none;
  background: #000;
  color: #fff;
  width: 35px;
  height: 35px;
  border-radius: 50%;
  font-size: 18px;
  cursor: pointer;
  transition: 0.3s;
}
.circle-btn:hover {
  background: #ff6600;
}
.popup {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.6);
  display: flex; justify-content: center; align-items: center;
}
.popup.hidden { display: none; }
.popup-content {
  background: white;
  padding: 20px;
  width: 90%;
  max-width: 500px;
  border-radius: 8px;
}
#popupClose {
  float: right;
  cursor: pointer;
  font-size: 22px;
}
@media (max-width: 768px) {
  .custom-grid .grid-container {
    grid-template-columns: 1fr;
  }
}
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const buttons = document.querySelectorAll(".circle-btn");
  const popup = document.getElementById("productPopup");
  const popupDetails = document.getElementById("popupDetails");
  const closeBtn = document.getElementById("popupClose");

  buttons.forEach(btn => {
    btn.addEventListener("click", () => {
      const handle = btn.dataset.handle;

      fetch(`/products/${handle}.js`)
        .then(res => res.json())
        .then(product => {
          let variantsHtml = "";
          product.variants.forEach(v => {
            variantsHtml += `<option value="${v.id}">${v.title} - ${Shopify.formatMoney(v.price)}</option>`;
          });

          popupDetails.innerHTML = `
            <h2>${product.title}</h2>
            <p>${Shopify.formatMoney(product.price)}</p>
            <p>${product.description}</p>
            <select id="variantSelect">${variantsHtml}</select>
            <button id="addToCartBtn">Add to Cart</button>
          `;

          popup.classList.remove("hidden");

          document.getElementById("addToCartBtn").addEventListener("click", () => {
            const variantId = document.getElementById("variantSelect").value;

            // AJAX add to cart
            fetch("/cart/add.js", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ id: variantId, quantity: 1 })
            }).then(res => res.json()).then(item => {
              console.log("Added:", item);

              // âœ… Special rule: if Black + Medium selected, also add Soft Winter Jacket
              if (item.variant_title.includes("Black") && item.variant_title.includes("Medium")) {
                const jacket = {{ all_products['soft-winter-jacket'].first_available_variant.id | json }};
                fetch("/cart/add.js", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({ id: jacket, quantity: 1 })
                }).then(r => r.json()).then(j => console.log("Also added:", j));
              }

              alert("Product added to cart!");
              popup.classList.add("hidden");
            });
          });
        });
    });
  });

  closeBtn.addEventListener("click", () => popup.classList.add("hidden"));
  popup.addEventListener("click", e => { if (e.target === popup) popup.classList.add("hidden"); });
});
</script>
