{% comment %}
  Custom Product Grid Section with Popup
{% endcomment %}

<section class="custom-product-grid" style="padding:60px 20px;">
  {% if section.settings.heading != blank %}
    <h2 style="text-align:center; margin-bottom:30px;">
      {{ section.settings.heading }}
    </h2>
  {% endif %}

  <div class="product-grid">
    {% for product in collections[section.settings.collection].products limit: section.settings.products_to_show %}
      <div class="product-card" 
           data-title="{{ product.title }}"
           data-price="{{ product.price | money }}"
           data-url="{{ product.url }}"
           data-image="{{ product.featured_image | image_url: width: 400 }}"
           data-description="{{ product.description | strip_html | truncate: 150 }}"
           data-handle="{{ product.handle }}">
        <img src="{{ product.featured_image | image_url: width: 400 }}" 
             alt="{{ product.title }}">
        <h3>{{ product.title }}</h3>
        <p>{{ product.price | money }}</p>
      </div>
    {% else %}
      <p>No products found in this collection.</p>
    {% endfor %}
  </div>

  <!-- Popup Modal -->
  <div id="productModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <div class="modal-body">
        <img id="modalImage" src="" alt="" />
        <h3 id="modalTitle"></h3>
        <p id="modalPrice"></p>
        <p id="modalDescription"></p>
        
        <!-- Dynamic options -->
        <div id="optionSelectors"></div>
        
        <button class="add-to-cart">Add to Cart →</button>
      </div>
    </div>
  </div>
</section>

<style>
.product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}
.product-card {
  border:1px solid #ddd;
  border-radius:12px;
  padding:10px;
  text-align:center;
  cursor:pointer;
  transition: 0.3s;
}
.product-card:hover {
  transform: scale(1.03);
}
.product-card img {
  width:100%;
  border-radius:8px;
}

/* Tablet */
@media(max-width:1024px) {
  .product-grid { grid-template-columns: repeat(2, 1fr); }
}
/* Mobile */
@media(max-width:600px) {
  .product-grid { grid-template-columns: repeat(2, 1fr); }
}

/* Popup Modal */
.modal {
  display: none;
  position: fixed;
  z-index: 9999;
  left:0; top:0;
  width:100%; height:100%;
  background: rgba(0,0,0,0.6);
  justify-content: center;
  align-items: center;
}
.modal-content {
  background:#fff;
  padding:20px;
  border-radius:12px;
  max-width:400px;
  width:90%;
  position:relative;
}
.modal-content img {
  width:100%;
  border-radius:8px;
  margin-bottom:15px;
}
.close {
  position:absolute;
  top:10px; right:15px;
  font-size:22px;
  cursor:pointer;
}
.option-group { margin-bottom: 10px; }
.option-group label { display:block; margin-bottom:5px; font-weight:bold; }
.option-select, .option-btn {
  padding:8px;
  border:1px solid #ccc;
  border-radius:6px;
  margin-right:5px;
  cursor:pointer;
}
.option-btn.active {
  background:#000;
  color:#fff;
}
.add-to-cart {
  display:block;
  width:100%;
  margin-top:15px;
  padding:12px;
  background:#000;
  color:#fff;
  border:none;
  border-radius:8px;
  cursor:pointer;
  transition:0.3s;
}
.add-to-cart.added {
  background: green;
}
</style>

<script>
function initProductPopup() {
  let currentProduct = null;
  let currentProductHandle = "";

  function findVariantId(product, selections) {
    const o = product.options;
    return (product.variants.find(v => {
      return (!o[0] || v.option1 === selections.option1) &&
             (!o[1] || v.option2 === selections.option2) &&
             (!o[2] || v.option3 === selections.option3);
    }) || {}).id || null;
  }

  function renderOptions(product) {
    const container = document.getElementById("optionSelectors");
    container.innerHTML = "";

    product.options.forEach((optName, idx) => {
      const group = document.createElement("div");
      group.classList.add("option-group");

      const label = document.createElement("label");
      label.textContent = optName;
      group.appendChild(label);

      const values = [...new Set(product.variants.map(v => v[`option${idx+1}`]))];

      if (values.length <= 5) {
        values.forEach(val => {
          const btn = document.createElement("button");
          btn.textContent = val;
          btn.className = "option-btn";
          btn.dataset.optIndex = idx+1;
          btn.dataset.value = val;
          btn.addEventListener("click", () => {
            group.querySelectorAll(".option-btn").forEach(b => b.classList.remove("active"));
            btn.classList.add("active");
          });
          group.appendChild(btn);
        });
      } else {
        const select = document.createElement("select");
        select.className = "option-select";
        select.dataset.optIndex = idx+1;
        const empty = document.createElement("option");
        empty.value = ""; empty.textContent = "Choose " + optName;
        select.appendChild(empty);
        values.forEach(val => {
          const opt = document.createElement("option");
          opt.value = val;
          opt.textContent = val;
          select.appendChild(opt);
        });
        group.appendChild(select);
      }

      container.appendChild(group);
    });
  }

  document.querySelectorAll(".product-card").forEach(card => {
    card.addEventListener("click", async () => {
      document.querySelector(".add-to-cart").textContent = "Add to Cart →";
      document.querySelector(".add-to-cart").classList.remove("added");

      document.getElementById("modalImage").src = card.dataset.image;
      document.getElementById("modalTitle").textContent = card.dataset.title;
      document.getElementById("modalPrice").textContent = card.dataset.price;
      document.getElementById("modalDescription").textContent = card.dataset.description;
      currentProductHandle = card.dataset.handle;

      try {
        const res = await fetch(`/products/${currentProductHandle}.js`);
        currentProduct = await res.json();
        renderOptions(currentProduct);
      } catch(err) {
        console.error("Product JSON error:", err);
      }

      document.getElementById("productModal").style.display = "flex";
    });
  });

  document.querySelector(".close").addEventListener("click", () => {
    document.getElementById("productModal").style.display = "none";
  });

  window.addEventListener("click", (e) => {
    if (e.target.id === "productModal") {
      document.getElementById("productModal").style.display = "none";
    }
  });

  document.querySelector(".add-to-cart").addEventListener("click", async function() {
    if (!currentProduct) return;

    const selections = {};
    currentProduct.options.forEach((opt, idx) => {
      const btnActive = document.querySelector(`.option-btn.active[data-opt-index="${idx+1}"]`);
      const selectEl = document.querySelector(`.option-select[data-opt-index="${idx+1}"]`);
      selections[`option${idx+1}`] = btnActive ? btnActive.dataset.value : (selectEl ? selectEl.value : "");
    });

    for (let i = 0; i < currentProduct.options.length; i++) {
      if (!selections[`option${i+1}`]) {
        alert(`Please select ${currentProduct.options[i]}`);
        return;
      }
    }

    const id = findVariantId(currentProduct, selections);
    if (!id) { alert("Variant not found."); return; }

    try {
      await fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id, quantity: 1 })
      });

      this.textContent = "Added to Cart ✓";
      this.classList.add("added");
    } catch (err) {
      console.error("Cart error:", err);
      alert("Failed to add to cart.");
    }
  });
}

// Run on page load
document.addEventListener("DOMContentLoaded", initProductPopup);

// Run when section is reloaded in Shopify editor
if (Shopify.designMode) {
  document.addEventListener('shopify:section:load', function(event) {
    if (event.target.querySelector('.custom-product-grid')) {
      initProductPopup();
    }
  });
}
</script>

{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Section Heading",
      "default": "Featured Products"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Select Collection"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "label": "Number of products",
      "min": 2,
      "max": 12,
      "step": 1,
      "default": 6
    }
  ],
  "presets": [
    {
      "name": "Custom Product Grid with Popup",
      "category": "Custom"
    }
  ]
}
{% endschema %}
