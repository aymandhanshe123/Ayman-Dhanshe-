{% comment %}
Custom Product Grid Section with Popup
{% endcomment %}

<section class="custom-product-grid" style="padding:60px 20px;">
  {% if section.settings.heading != blank %}
    <h2 style="text-align:center; margin-bottom:30px;">
      {{ section.settings.heading }}
    </h2>
  {% endif %}

  <div class="product-grid">
    {% for product in collections[section.settings.collection].products limit: section.settings.products_to_show %}
      <div class="product-card" 
           data-title="{{ product.title }}"
           data-price="{{ product.price | money }}"
           data-url="{{ product.url }}"
           data-image="{{ product.featured_image | image_url: width: 400 }}"
           data-description="{{ product.description | strip_html | truncate: 150 }}"
           data-handle="{{ product.handle }}">
        <img src="{{ product.featured_image | image_url: width: 400 }}" 
             alt="{{ product.title }}">
        <h3>{{ product.title }}</h3>
        <p>{{ product.price | money }}</p>
      </div>
    {% else %}
      <p>No products found in this collection.</p>
    {% endfor %}
  </div>

  <!-- Popup Modal -->
  <div id="productModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <div class="modal-body">
        <img id="modalImage" src="" alt="" />
        <h3 id="modalTitle"></h3>
        <p id="modalPrice"></p>
        <p id="modalDescription"></p>
        
        <label>Color</label>
        <div class="color-options">
          <button class="color-btn" data-color="Blue">Blue</button>
          <button class="color-btn" data-color="Black">Black</button>
        </div>
        
        <label for="modalSize">Size</label>
        <select id="modalSize">
          <option value="">Choose your size</option>
          <option value="XS">XS</option>
          <option value="S">S</option>
          <option value="M">M</option>
          <option value="L">L</option>
          <option value="XL">XL</option>
        </select>
        
        <button class="add-to-cart">Add to Cart →</button>
      </div>
    </div>
  </div>
</section>

<style>
.product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}
.product-card {
  border:1px solid #ddd;
  border-radius:12px;
  padding:10px;
  text-align:center;
  cursor:pointer;
  transition: 0.3s;
}
.product-card:hover {
  transform: scale(1.03);
}
.product-card img {
  width:100%;
  border-radius:8px;
}

/* Tablet */
@media(max-width:1024px) {
  .product-grid { grid-template-columns: repeat(2, 1fr); }
}
/* Mobile = 2x2 */
@media(max-width:600px) {
  .product-grid { grid-template-columns: repeat(2, 1fr); }
}

/* Popup Modal */
.modal {
  display: none;
  position: fixed;
  z-index: 9999;
  left:0; top:0;
  width:100%; height:100%;
  background: rgba(0,0,0,0.6);
  justify-content: center;
  align-items: center;
}
.modal-content {
  background:#fff;
  padding:20px;
  border-radius:12px;
  max-width:400px;
  width:90%;
  position:relative;
}
.modal-content img {
  width:100%;
  border-radius:8px;
  margin-bottom:15px;
}
.close {
  position:absolute;
  top:10px; right:15px;
  font-size:22px;
  cursor:pointer;
}
.color-options {
  display:flex; gap:10px; margin:10px 0;
}
.color-btn {
  flex:1;
  border:1px solid #000;
  background:#fff;
  padding:8px;
  cursor:pointer;
  border-radius:6px;
}
.color-btn.active {
  background:#000;
  color:#fff;
}
.add-to-cart {
  display:block;
  width:100%;
  margin-top:15px;
  padding:12px;
  background:#000;
  color:#fff;
  border:none;
  border-radius:8px;
  cursor:pointer;
  transition:0.3s;
}
.add-to-cart.added {
  background: green;
}
</style>

<script>
let selectedColor = "";
let currentProductHandle = "";

document.querySelectorAll(".product-card").forEach(card => {
  card.addEventListener("click", () => {
    // Reset state
    selectedColor = "";
    document.querySelectorAll(".color-btn").forEach(btn => btn.classList.remove("active"));
    document.querySelector(".add-to-cart").textContent = "Add to Cart →";
    document.querySelector(".add-to-cart").classList.remove("added");

    // Fill modal with product data
    document.getElementById("modalImage").src = card.dataset.image;
    document.getElementById("modalTitle").textContent = card.dataset.title;
    document.getElementById("modalPrice").textContent = card.dataset.price;
    document.getElementById("modalDescription").textContent = card.dataset.description;
    currentProductHandle = card.dataset.handle;

    document.getElementById("productModal").style.display = "flex";
  });
});

// Close modal
document.querySelector(".close").addEventListener("click", () => {
  document.getElementById("productModal").style.display = "none";
});
window.addEventListener("click", (e) => {
  if (e.target.id === "productModal") {
    document.getElementById("productModal").style.display = "none";
  }
});

// Color selection
document.querySelectorAll(".color-btn").forEach(btn => {
  btn.addEventListener("click", () => {
    document.querySelectorAll(".color-btn").forEach(b => b.classList.remove("active"));
    btn.classList.add("active");
    selectedColor = btn.dataset.color;
  });
});

// Add to cart
document.querySelector(".add-to-cart").addEventListener("click", async function() {
  const size = document.getElementById("modalSize").value;
  if (!selectedColor) { alert("Please select a color"); return; }
  if (!size) { alert("Please select a size"); return; }

  try {
    // Fetch product JSON to get variant IDs
    const res = await fetch(`/products/${currentProductHandle}.js`);
    const product = await res.json();

    // Find matching variant (based on options)
    const variant = product.variants.find(v => 
      v.title.toLowerCase().includes(selectedColor.toLowerCase()) &&
      v.title.toLowerCase().includes(size.toLowerCase())
    );

    if (!variant) {
      alert("Variant not found for this selection.");
      return;
    }

    // Add to cart
    await fetch('/cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: variant.id, quantity: 1 })
    });

    this.textContent = "Added to Cart ✓";
    this.classList.add("added");
  } catch (err) {
    console.error("Cart error:", err);
    alert("Failed to add to cart.");
  }
});
</script>

{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Section Heading",
      "default": "Featured Products"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Select Collection"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "label": "Number of products",
      "min": 2,
      "max": 12,
      "step": 1,
      "default": 6
    }
  ],
  "presets": [
    {
      "name": "Custom Product Grid with Popup",
      "category": "Custom"
    }
  ]
}
{% endschema %}
